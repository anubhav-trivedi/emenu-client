angular.module("mk.Models").factory("Model", function($q, Construct, config, mkData, mkModelUtils, mkOnlineStatus) {

    return Construct(
        {
            initialize: function(name, plural, searchOptions) {
                this.type = name;
                this.resource = plural || name + 's';
                this.loaded = mkData.getLoaded();
                this.searchOptions = searchOptions || {};
                this.cache = {};
            },

            initData: function(mkData, config) {
                this.mkData = mkData;

                var self = this,
                    manager = mkData.manager,
                    metadataStore = manager.metadataStore,
                    propertyConfigs = this.properties || {};

                if (config) {
                    manager.metadataStore.addEntityType(_.extend({
                        shortName: this.type,
                        namespace: "KonektData.Models"
                    }, config));
                }

                var entityType = this.entityType = metadataStore.getEntityType(this.type),
                    properties = {
                        serializerFn: serializerFn
                    };

                this.keyProp = entityType.keyProperties[0];
                if (this.keyProp.dataType.isInteger) {
                    properties.autoGeneratedKeyType = breeze.AutoGeneratedKeyType.KeyGenerator;
                }

                entityType.setProperties(properties);
                metadataStore.registerEntityTypeCtor(this.type, this);

                _.each(_.union(entityType.dataProperties, entityType.navigationProperties), function(dataProp) {
                    var propertyName = dataProp.name;
                    Object.defineProperty(self.prototype, getOtherPropertyName(propertyName), {
                        get: function() {
                            return this[propertyName]
                        },
                        set: function(val) {
                            this[propertyName] = val;
                        },
                        configurable: true
                    });

                });

                _.each(propertyConfigs, function(propConfig, propertyName) {
                    var configProperties = propConfig.properties || {},
                        validations = propConfig.validations,
                    // try camelCase if the name fails, this is because eMenu currently uses CamelCase property names
                        dataProperty = entityType.getProperty(propertyName) || entityType.getProperty(getOtherPropertyName(propertyName));

                    Array.prototype.push.apply(dataProperty.validators, validations);

                    dataProperty.setProperties(configProperties);
                    if (propConfig.dataType) {
                        dataProperty.dataType = propConfig.dataType;
                        //todo only remove old data type validators
                        dataProperty.validators = [];
                    }
                });

                this.prototype.setProperty = function(name, val) {
                    var parserFn = propertyConfigs[name] && propertyConfigs[name].properties && propertyConfigs[name].properties.custom && propertyConfigs[name].properties.custom.parserFn;
                    this[name] = parserFn ? parserFn(val) : val;
                };
            },

            create: function(params) {
                params = params || {};
                var keyName = this.keyProp.name,
                    manager = this.mkData.manager;
                if(!params[keyName]) {
                    if (this.keyProp.dataType == breeze.DataType.String) {
                        params[keyName] = breeze.core.getUuid();
                    } else if (this.keyProp.dataType.isInteger) {
                        //manager.generateTempKeyValue()
                    }
                }

                return manager.createEntity(this.type, params);
            },

            findLocal: function(params, options) {
                return this.mkData.manager.executeQueryLocally(makeQuery(this, params, options));
            },

            findOneFromServer: function(params, options) {
                return searchOne(this, params, options, false);
            },

            findAllFromServer: function(params, options) {
                return search(this, params, options, false);
            },

            findOneFromCache: function(params, options) {
                return searchOne(this, params, options, true);
            },

            findAllFromCache: function(params, options) {
                return search(this, params, options, true);
            }
        },
        {
            save: function(options) {
                if (options && options.forceModified && this.entityAspect.entityState.isUnchanged()) {
                    this.entityAspect.setModified();
                }
                return this.constructor.mkData.saveChanges([this]);
            },

            isDirty: function() {
                return this.entityAspect.entityState.isAddedModifiedOrDeleted();
            }
        });

    function searchOne(self, params, options, useCache) {
        if (typeof params !== 'object') {
            var obj = {};
            obj[self.keyProp.name] = params;
            params = obj;
        }
        return search(self, params, options, useCache).then(function(results) {
            if (results.length) return results[0];
            else return $q.reject("None Found");
        });
    }

    function search(self, params, options, useCache) {
        options = _.merge({}, config.data.searchOptions, self.searchOptions, options);

        var query = makeQuery(self, params, options),
            loadedPromise = $q.when(options.mkData || self.loaded);

        return $q.all([loadedPromise, mkOnlineStatus.waitForStatus()]).then(function(results) {
            var mkData = results[0],
                offline = results[1] == 'offline',
                // we treat savedOnly option slightly different as it used to be on the optons obj directly, not the cache options
                localResults = useCache ? checkCache(self, query, _.extend({}, options.cache, {savedOnly: options.savedOnly}), options.localOnly || offline) : [];

            if (localResults.length || options.localOnly) {
                return localResults;
            } else {
                return mkData.manager.executeQuery(query).then(function(response) {
                    if (options.checkAssociations) {
                        mkModelUtils.updateAssociations(response);
                    }
                    return response.results;
                }).to$q();
            }
        });
    }

    function checkCache(self, query, cacheOptions, force) {
        if (!cacheOptions) return [];

        var key = cacheOptions.key,
            expires = cacheOptions.expires || 5*60*1000, // default 5 minutes
            lastQuery = key && self.cache[key],
            now = new Date(),
            cached;

        if (force || !key || (lastQuery && (now - lastQuery) < expires)) {
            cached = mkData.manager.executeQueryLocally(query);
        } else {
            cached = [];
        }

        if (cacheOptions.savedOnly) {
            cached = _.filter(cached, function(model) { return model.entityAspect.entityState != breeze.EntityState.Added })
        }

        if (key && !cached.length) {
            self.cache[key] = now;
        }

        return cached;
    }

    function makeQuery(self, params, options) {
        return mkModelUtils.makeQuery(_.extend({
            model: self.type,
            filters: params
        }, options));
    }

    function getOtherPropertyName(propertyName) {
        if (propertyName.match(/^[A-Z]/)) return propertyName.replace(/^./, function(a) { return a.toLowerCase() });
        else return propertyName.replace(/^./, function(a) { return a.toUpperCase() });
    }

    function serializerFn(dataProperty, value) {
        if (dataProperty.custom && dataProperty.custom.serializerFn) {
            return dataProperty.custom.serializerFn(value, dataProperty);
        }
        else {
            return value;
        }
    }

});